datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  writtenReviews  Review[]  @relation("WrittenReviews")
  favoritePokemon Pokemon[]
}

model Review {
  id          String   @id @default(cuid())
  description String
  rating      Int
  createdAt   DateTime @default(now())
  author      User?    @relation("WrittenReviews", fields: [authorId], references: [id])
  authorId    String?
  pokemon     String
}

model Pokemon {
  id          String @id @default(cuid())
  pokemon     String @unique
  favorite    Int?   @default(0)
  favoritedBy User[]
}
